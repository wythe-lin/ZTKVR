/*Pseudo Header*/
#define STATE_BASE              0x00000100
#define TASK_ID_BASE            0x00000200
#define STATE_ID_BASE           0x00000300
#define EVENT_KEY_POWER_BASE    0x00001000
#define EVENT_KEY_BASE    		0x00001000
#define EVENT_DIRECTION_BASE    0x00002000
#define EVENT_MEDIA_BASE        0x00003000
#define EVENT_RTC_BASE          0x00004000
#define EVENT_EXT_BASE          0x00005000
#define EVENT_PWR_BASE          0x00006000
#define EVENT_SLIDE_SHOW_BASE   0x00007000
#define EVENT_APQ_BASE          0x00008000
#define EVENT_USBD_BASE     	0x00009000
#define EVENT_CALENDAR_BASE   	0x0000A000

typedef enum
{
    STATE_VIDEO_RECORD = STATE_BASE,
    STATE_VIDEO_PREVIEW,
    STATE_BROWSE,
    STATE_SETTING,
    STATE_STARTUP,
    STATE_MOTION_DETECTION,
    STATE_THUMBNAIL,
    STATE_AUDIO_RECORD,   // dominant add for audio record
    STATE_MAX,
    STATE_DUMMY=STATE_MAX
} STATE_ENUM;


typedef enum
{
    TASK_AUDIO_DAC_MSG_ID=TASK_ID_BASE,
    TASK_AUDIO_DECODER_MSG_ID,
    TASK_FILESRV_MSG_ID,
    TASK_JPEG_MSG_ID,
    TASK_PPU_MSG_ID,
    TASK_SYSTEM_MSG_ID,
    TASK_UMI_MSG_ID
} TASK_ID_ENUM;


typedef enum
{
    STATE_STARTUP_MSG_ID=STATE_ID_BASE,
    STATE_ICON_SHOW_MSG_ID,
    STATE_SLIDE_SHOW_MSG_ID,
    STATE_PHOTO_WIZARD_MSG_ID,
    STATE_AVI_SHOW_MSG_ID,
    STATE_MENU_MSG_ID,
    STATE_CALENDAR_MSG_ID,
    STATE_SETUP_MSG_ID,
    STATE_MUSIC_MSG_ID,
    STATE_PETS_MSG_ID,
    STATE_SYS_HANDLE_MSG_ID,
    STATE_ID_MAX
} STATE_ID_ENUM;

typedef enum {
	// Hot keys
    EVENT_KEY_POWER=EVENT_KEY_BASE,
    EVENT_KEY_MENU        ,
    EVENT_KEY_SLIDE_SHOW  ,
    EVENT_KEY_ICON_SHOW   ,
    EVENT_KEY_PHOTO_VIEW,
    EVENT_KEY_CALENDAR    ,
    EVENT_KEY_SETUP       ,
    EVENT_KEY_MUSIC       ,
    EVENT_KEY_PETS        ,
    EVENT_KEY_GAMES       ,
    EVENT_KEY_STORAGE	  ,
	// Direction keys
    EVENT_KEY_OK,
	EVENT_KEY_IR_OK		,
    EVENT_KEY_BACK      , 
    EVENT_KEY_LEFT      , 
    EVENT_KEY_IR_LEFT	,
    EVENT_KEY_RIGHT     , 
	EVENT_KEY_IR_RIGHT	,
    EVENT_KEY_UP        , 
    EVENT_KEY_DOWN      , 
    EVENT_KEY_PAGEUP    , 
    EVENT_KEY_PAGEDOWN  , 
    EVENT_KEY_ZOOM_IN   , 
    EVENT_KEY_ZOOM_OUT  , 
    EVENT_KEY_ZOOM_CYCLE, 
    EVENT_KEY_ROTATE	,
    EVENT_KEY_MODE		,
    EVENT_KEY_INTERVAL	,
    // Media keys
    EVENT_KEY_MEDIA_SOUND_ON_OFF,
    EVENT_KEY_MEDIA_VOL_UP   ,
    EVENT_KEY_MEDIA_VOL_DOWN ,
    EVENT_KEY_MEDIA_STOP     ,
    EVENT_KEY_MEDIA_PLAY     	,
    EVENT_KEY_MEDIA_PAUSE    ,
    EVENT_KEY_MEDIA_PLAY_PAUSE	,
    EVENT_KEY_MEDIA_PREV     ,
    EVENT_KEY_MEDIA_NEXT     ,
    EVENT_KEY_MEDIA_QUICK_SEL,
    EVENT_KEY_MEDIA_FF       ,
    EVENT_KEY_MEDIA_BF       ,
    EVENT_KEY_FM_CH_UP       ,
    EVENT_KEY_FM_CH_DOWN     ,
    EVENT_KEY_FM_CH_QUICK_SEL,
    EVENT_KEY_VOLUME_QUICK_SEL,
    // Auto demo
    EVENT_KEY_AUTO_DEMO,
    // AP should not response to this event
    EVENT_KEY_NO_ACTION,
    // PHOTO Frame display mode
	EVENT_PORTRAIT_DISPLAY,
    EVENT_LANDSCAPE_DISPLAY,
    // Pop-up style OSD menu
    EVENT_KEY_OSD_MENU,
    EVENT_KEY_NUM_0,
    EVENT_KEY_NUM_1,
    EVENT_KEY_NUM_2,
    EVENT_KEY_NUM_3,
    EVENT_KEY_NUM_4,
    EVENT_KEY_NUM_5,
    EVENT_KEY_NUM_6,
    EVENT_KEY_NUM_7,
    EVENT_KEY_NUM_8,
    EVENT_KEY_NUM_9,
    // End of key define
    EVENT_KEY_MAX
} EVENT_MEDIA_ENUM;

typedef enum {
    EVENT_RTC_AUTOPWR_ON=EVENT_RTC_BASE,  
    EVENT_RTC_AUTOPWR_OFF,
    EVENT_RTC_SEC,
    EVENT_RTC_MIN,
    EVENT_RTC_HOUR,
    EVENT_RTC_DAY,
    EVENT_RTC_ALARM_POP  ,
    EVENT_RTC_MAX
} EVENT_RTC_ENUM;

typedef enum {
    EVENT_STORAGE_LOADING_START=EVENT_EXT_BASE,
    EVENT_STORAGE_LOADING_END,
    EVENT_STORAGE_MSG_POP,
    EVENT_STORAGE_CHANGE,
    EVENT_STG_NAUGHTY   ,
    EVENT_USB_PC_IN     ,
    EVENT_USB_PC_OUT    ,
    EVENT_INTERROGATION ,
    EVENT_EXT_MAX
} EVENT_EXT_ENUM;

typedef enum {
    EVENT_KEY_SLIDESHOW_TIMEDISPLAY=EVENT_SLIDE_SHOW_BASE,
    EVENT_KEY_SLIDESHOW_MUSIC,
    EVENT_KEY_SLIDESHOW_SET_TRANSITION,
    EVENT_KEY_SLIDESHOW_INTERVAL,
    EVENT_KEY_SLIDESHOW_SELECT_MUSIC,
    EVENT_KEY_SLIDESHOW_PLAY_PAUSE,
    EVENT_KEY_SLIDESHOW_DATE_ONOFF,
    EVENT_SLIDE_SHOW_MAX
} EVENT_SLIDE_SHOW_ENUM;  

typedef enum {
    EVENT_KEY_CALENDAR_INTERVAL=EVENT_CALENDAR_BASE,
    EVENT_KEY_CALENDAR_SELECT_MUSIC,
    EVENT_KEY_CALENDAR_SET_TRANSITION,
    EVENT_CALENDAR_MAX
} EVENT_CALENDAR_ENUM;  

/*
typedef enum {
    EVENT_APQ_KEY_MSG=EVENT_APQ_BASE,
    EVENT_APQ_ERR_MSG,    
    EVENT_APQ_PWRKEY_MSG,
    EVENT_APQ_LVR_MSG,
    EVENT_APQ_STORAGE_MSG,
    EVENT_APQ_SYS_ERR_MSG,
    EVENT_APQ_MSG_MAX	
} EVENT_APQ_MSG_ENUM;  
*/

typedef enum {
    EVENT_PWR_LVD=EVENT_PWR_BASE,
    EVENT_PWR_ADAPTOR_IN,    
    EVENT_PWR_ADAPTOR_OUT,
    EVENT_PWR_MAX	
} EVENT_PWR_ENUM;

typedef enum {
    EVENT_APQ_ERR_MSG=EVENT_APQ_BASE,    
    EVENT_APQ_HANDLE_MSG,
	EVENT_APQ_PPU_DONE	,    
    EVENT_APQ_MSG_MAX	
} EVENT_APQ_MSG_ENUM;  

#if 0
typedef struct 
{
	INT8U from_file_id;
    INT8U to_file_id;
    INT8U icon_matrix_w;   /* icon list  matrix width (icons)*/
    INT8U icon_matrix_h;   /* icon list  matrix high (icons)*/
    INT16U Pos_x0;
    INT16U Pos_x1;
    INT16U Pos_x2;
    INT16U Pos_x3;
    INT16U Pos_y0;
    INT16U Pos_y1;
    INT16U Pos_y2;
    INT16U Pos_y3;      
//	struct STFileNodeInfo *pstFNodeInfo;
} STIconShowMsg;
#endif


typedef enum {
    EVENT_USBD_ISR_MSG = EVENT_USBD_BASE,    
    EVENT_USBD_PLUG_MSG,
    EVENT_USBD_MSG_MAX	
} EVENT_USBD_MSG_ENUM;  
